(dp1
S'output'
p2
S"<type 'exceptions.TypeError'> long() argument must be a string or a number, not 'Rows'"
p3
sS'layer'
p4
S'/home/nyeinchan/web2py/applications/monitor/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n#########################################################################\n\n@auth.requires_login()\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n\n    if you need a simple wiki simply replace the two lines below with:\n    return auth.wiki()\n    """\n    response.flash = T("Welcome")\n    return dict(message=T(\'Welcome to web2py!\'))\n\n\ndef about():\n    return dict(message="This is about")\n\ndef brand():\n    grid = SQLFORM.smartgrid(\n        db.brand,\n        paginate=20,\n        csv=False\n    )\n\n    response.moduleTitle = \'Brand\'\n    return dict(form=grid)\n    ##data = db().select(db.brand.ALL, orderby=~db.brand.id)\n    ##return dict(form=SQLFORM(db.brand).process(), data=data)\n\ndef model():\n    db.model.brand.requires=IS_IN_DB(db, db.brand.id, \'%(name)s\')\n    grid = SQLFORM.smartgrid(\n        db.model,\n        paginate=10,\n        csv=False\n    )\n    # grid=SQLFORM(db.model).process()\n    response.moduleTitle = \'Model\'\n    return dict(form=grid)\n\ndef general_table():\n    db.general_table.config_type.requires=IS_IN_DB(db, db.config_group.id, \'%(name)s\')\n    grid = SQLFORM.smartgrid(\n        db.general_table,\n        paginate=20,\n        csv=False\n    )\n\n    response.moduleTitle = \'Genral Set up\'\n    return dict(form=grid)\n\ndef sim():\n    db.sim.brand_type.requires=IS_IN_DB(db, db.config_group.id, \'%(name)s\')\n    db.sim.plan_type.requires=IS_IN_DB(db, db.config_group.id, \'%(name)s\')\n    grid = SQLFORM.smartgrid(\n        db.sim,\n        paginate=20,\n        csv=False\n    )\n\n    response.moduleTitle = \'Genral Set up\'\n    return dict(form=grid)\n\ndef room():\n    db.room.config.requires=IS_IN_DB(db(db.general_table.config_type == db(db.config_group.name==\'Location\').select(db.config_group.id)), db.general_table.id, \'%(name)s\', sort=True)\n    grid = SQLFORM.smartgrid(\n        db.room,\n        paginate=20,\n        csv=False\n    )\n    response.moduleTitle = \'Room\'\n    return dict(form=grid)\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/bulk_register\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    also notice there is http://..../[app]/appadmin/manage/auth to allow administrator to manage users\n    """\n    return dict(form=auth())\n\n\n\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\nresponse._vars=response._caller(room)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/nyeinchan/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/nyeinchan/web2py/applications/monitor/controllers/default.py", line 122, in <module>\n  File "/home/nyeinchan/web2py/gluon/globals.py", line 417, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/nyeinchan/web2py/applications/monitor/controllers/default.py", line 78, in room\n    csv=False\n  File "/home/nyeinchan/web2py/gluon/sqlhtml.py", line 3102, in smartgrid\n    user_signature=user_signature, **kwargs)\n  File "/home/nyeinchan/web2py/gluon/sqlhtml.py", line 2502, in grid\n    search_menu = SQLFORM.search_menu(sfields, prefix=prefix)\n  File "/home/nyeinchan/web2py/gluon/sqlhtml.py", line 1923, in search_menu\n    _class=\'form-control\',\n  File "/home/nyeinchan/web2py/gluon/validators.py", line 598, in options\n    self.build_set()\n  File "/home/nyeinchan/web2py/gluon/validators.py", line 584, in build_set\n    records = self.dbset(table).select(*fields, **dd)\n  File "/home/nyeinchan/web2py/gluon/packages/dal/pydal/objects.py", line 2020, in select\n    return adapter.select(self.query, fields, attributes)\n  File "/home/nyeinchan/web2py/gluon/packages/dal/pydal/adapters/base.py", line 1283, in select\n    sql = self._select(query, fields, attributes)\n  File "/home/nyeinchan/web2py/gluon/packages/dal/pydal/adapters/base.py", line 1170, in _select\n    sql_w = \' WHERE \' + self.expand(query) if query else \'\'\n  File "/home/nyeinchan/web2py/gluon/packages/dal/pydal/adapters/base.py", line 952, in expand\n    rv = op(first, second, **optional_args)\n  File "/home/nyeinchan/web2py/gluon/packages/dal/pydal/adapters/base.py", line 767, in AND\n    return \'(%s AND %s)\' % (self.expand(first), self.expand(second))\n  File "/home/nyeinchan/web2py/gluon/packages/dal/pydal/adapters/base.py", line 952, in expand\n    rv = op(first, second, **optional_args)\n  File "/home/nyeinchan/web2py/gluon/packages/dal/pydal/adapters/base.py", line 846, in EQ\n    self.expand(second, first.type))\n  File "/home/nyeinchan/web2py/gluon/packages/dal/pydal/adapters/base.py", line 962, in expand\n    rv = self.represent(expression, field_type)\n  File "/home/nyeinchan/web2py/gluon/packages/dal/pydal/adapters/base.py", line 1442, in represent\n    return str(long(obj))\nTypeError: long() argument must be a string or a number, not \'Rows\'\n'
p11
s.