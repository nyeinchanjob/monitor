(dp1
S'output'
p2
S"<type 'exceptions.KeyError'> "
p3
sS'layer'
p4
S'/home/nyeinchan/web2py/applications/monitor/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n#########################################################################\nfrom gluon.contrib.appconfig import AppConfig\nfrom gluon.serializers import json\n\nmyconf = AppConfig(reload=True)\n\n@auth.requires_login()\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n\n    if you need a simple wiki simply replace the two lines below with:\n    return auth.wiki()\n    """\n    # current_page = request.vars.page or None\n    # print request.vars\n    # response.title += \' | \' + T(\'Posts\')\n    # if not current_page:\n    #     redirect(URL(\'index\'))\n    # else:\n    #     page = int(current_page)\n\n    response.flash = T("Welcome")\n    return dict(message=T(\'Welcome to web2py!\'))\n\n\ndef about():\n    return dict(message="This is about")\n\ndef brand():\n    grid = SQLFORM.smartgrid(\n        db.brand,\n        paginate=10,\n        csv=False,\n        linked_tables=False\n    )\n\n    response.moduleTitle = \'Brand\'\n    return dict(form=grid)\n    ##data = db().select(db.brand.ALL, orderby=~db.brand.id)\n    ##return dict(form=SQLFORM(db.brand).process(), data=data)\n\ndef model():\n    db.model.brand.requires=IS_IN_DB(db, db.brand.id, \'%(name)s\')\n    grid = SQLFORM.smartgrid(\n        db.model,\n        paginate=10,\n        csv=False,\n        linked_tables=False\n    )\n    # grid=SQLFORM(db.model).process()\n    response.moduleTitle = \'Model\'\n    return dict(form=grid)\n\ndef general_table():\n    db.general_table.config_type.requires=IS_IN_DB(db, db.config_group.id, \'%(name)s\')\n    grid = SQLFORM.smartgrid(\n        db.general_table,\n        paginate=10,\n        csv=False,\n        linked_tables=False\n    )\n\n    response.moduleTitle = \'Genral Set up\'\n    return dict(form=grid)\n\ndef sim():\n    operator_id = \'\'\n    plan_id = \'\'\n    for id in db(db.config_group.name==myconf.get(\'default_type.opt\')).select(db.config_group.id):\n        operator_id = id\n    db.sim.brand_type.requires=IS_IN_DB(db(db.general_table.config_type == operator_id), db.general_table.id, \'%(name)s\', sort=True)\n    for id in db(db.config_group.name==myconf.get(\'default_type.pln\')).select(db.config_group.id):\n        operator_id = id\n    db.sim.plan_type.requires=IS_IN_DB(db(db.general_table.config_type == plan_id), db.general_table.id, \'%(name)s\', sort=True)\n    grid = SQLFORM.smartgrid(\n        db.sim,\n        paginate=10,\n        csv=False,\n        linked_tables=False\n    )\n    response.moduleTitle = \'SIM Card\'\n    return dict(form=grid)\n\n\ndef room():\n    location_id = \'\'\n\n    for id in db(db.config_group.name==myconf.get(\'default_type.loc\')).select(db.config_group.id):\n        location_id = id\n    l_code = db(db.general_table.config_type == location_id).select(db.general_table.id, db.general_table.code)\n    db.room.config.requires=IS_IN_DB(db(db.general_table.config_type == location_id), db.general_table.id, \'%(name)s\', sort=True)\n\n    grid = SQLFORM.smartgrid(\n        db.room,\n        paginate=10,\n        csv=False,\n        linked_tables=False\n    )\n    response.moduleTitle = \'Room\'\n    return dict(form=grid, lcode=json(l_code))\n\ndef apps():\n    application_id=\'\'\n    for id in db(db.config_group.name==myconf.get(\'default_type.app\')).select(db.config_group.id):\n        application_id = id\n    db.apps.app_type.requires=IS_IN_DB(db(db.general_table.config_type == application_id), db.general_table.id, \'%(name)s\', sort=True)\n    grid = SQLFORM.smartgrid(\n        db.apps,\n        paginate=10,\n        csv=False,\n        linked_tables=False\n    )\n    response.moduleTitle = \'Application\'\n    return dict(form=grid)\n\ndef employee():\n    department_id = \'\'\n    for id in db(db.config_group.name==myconf.get(\'default_type.dpt\')).select(db.config_group.id):\n        department_id = id\n    db.employee.department.requires=IS_IN_DB(db(db.general_table.config_type == department_id), db.general_table.id, \'%(name)s\', sort=True)\n    grid = SQLFORM.smartgrid(\n        db.employee,\n        paginate=10,\n        csv=False,\n        linked_tables=False\n    )\n\n    response.moduleTitle = \'Brand\'\n    return dict(form=grid)\n\ndef email_account():\n    user_id = \'\'\n    license_id = \'\'\n    for id in db(db.config_group.name==myconf.get(\'default_type.usr\')).select(db.config_group.id):\n        user_id = id\n    db.email_account.user_type.requires=IS_IN_DB(db(db.general_table.config_type == user_id), db.general_table.id, \'%(name)s\', sort=True)\n    for id in db(db.config_group.name==myconf.get(\'default_type.lns\')).select(db.config_group.id):\n        license_id = id\n    db.email_account.license_type.requires=IS_IN_DB(db(db.general_table.config_type == license_id), db.general_table.id, \'%(name)s\', sort=True)\n    grid = SQLFORM.smartgrid(\n        db.email_account,\n        paginate=10,\n        csv=False,\n        linked_tables=False\n    )\n\n    response.moduleTitle = \'Brand\'\n    return dict(form=grid)\n\ndef device():\n    device_id = \'\'\n    os_id = \'\'\n    db.device.model_id.requires=IS_IN_DB(db, db.model.id, \'%(name)s\')\n    for id in db(db.config_group.name==myconf.get(\'default_type.dvc\')).select(db.config_group.id):\n        device_id = id\n    db.device.device_type.requires=IS_IN_DB(db(db.general_table.config_type == device_id), db.general_table.id, \'%(name)s\', sort=True)\n    d_code = db(db.general_table.config_type == device_id).select(db.general_table.id, db.general_table.code)\n    for id in db(db.config_group.name==myconf.get(\'default_type.oss\')).select(db.config_group.id):\n        os_id = id\n    db.device.os_type.requires=IS_IN_DB(db(db.general_table.config_type == os_id), db.general_table.id, \'%(name)s\', sort=True)\n    db.device.name.readonly = True\n    grid = SQLFORM.smartgrid(\n        db.device,\n        paginate=10,\n        csv=False,\n        linked_tables=False\n    )\n    response.moduleTitle = \'Device\'\n    return dict(form=grid, dcode=json(d_code))\n\ndef register():\n    form=SQLFORM.factory(db.client,db.address)\n    if form.process().accepted:\n        id = db.client.insert(**db.client._filter_fields(form.vars))\n        form.vars.client=id\n        id = db.address.insert(**db.address._filter_fields(form.vars))\n        response.flash=\'Thanks for filling the form\'\n    response.moduleTitle = \'Register\'\n    return dict(form=form)\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/bulk_register\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    also notice there is http://..../[app]/appadmin/manage/auth to allow administrator to manage users\n    """\n    return dict(form=auth())\n\n\n\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\nresponse._vars=response._caller(sim)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/nyeinchan/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/nyeinchan/web2py/applications/monitor/controllers/default.py", line 230, in <module>\n  File "/home/nyeinchan/web2py/gluon/globals.py", line 417, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/nyeinchan/web2py/applications/monitor/controllers/default.py", line 89, in sim\n    linked_tables=False\n  File "/home/nyeinchan/web2py/gluon/sqlhtml.py", line 3120, in smartgrid\n    grid.view_form.record))\n  File "/home/nyeinchan/web2py/gluon/sqlhtml.py", line 2982, in format\n    return table._format % row\n  File "/home/nyeinchan/web2py/gluon/packages/dal/pydal/objects.py", line 76, in __getitem__\n    raise KeyError\nKeyError\n'
p11
s.