(dp1
S'output'
p2
S"<type 'exceptions.Exception'> Validation error, field:serial <gluon.validators.IS_NOT_IN_DB object at 0x7fab669a8fd0>"
p3
sS'layer'
p4
S'/home/peace/web2py/applications/monitor/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n#########################################################################\nfrom gluon.contrib.appconfig import AppConfig\nfrom gluon.serializers import json\nfrom gluon.tools import geocode\n\nmyconf = AppConfig(reload=True)\n\n@auth.requires_login()\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n\n    if you need a simple wiki simply replace the two lines below with:\n    return auth.wiki()\n    """\n    # current_page = request.vars.page or None\n    # print request.vars\n    # response.title += \' | \' + T(\'Posts\')\n    # if not current_page:\n    #     redirect(URL(\'index\'))\n    # else:\n    #     page = int(current_page)\n\n    response.flash = T("Welcome")\n    return dict(message=T(\'Welcome to web2py!\'))\n\n\ndef about():\n    return dict(message="This is about")\n\ndef device_brand():\n    brand_grid = SQLFORM.smartgrid(\n        db.device_brand,\n        paginate=25,\n        csv=True,\n        details=False,\n        orderby=~db.device_brand.id,\n        linked_tables=False\n    )\n    response.moduleTitle = "Brand"\n    return dict(form_device_brand= brand_grid)\n\ndef device_model():\n    model_grid = SQLFORM.smartgrid(\n        db.device_model,\n        paginate=25,\n        csv=True,\n        details=False,\n        orderby=~db.device_model.id,\n        linked_tables=False\n    )\n    response.moduleTitle = "Model"\n    return dict(form_device_model= model_grid)\n\ndef device_os():\n    os_grid = SQLFORM.smartgrid(\n        db.os_type,\n        paginate=25,\n        csv=True,\n        details=False,\n        orderby=~db.os_type.id,\n        linked_tables=False\n    )\n    response.moduleTitle = "Device OS"\n    return dict(form_os_type= os_grid)\n\ndef device_type():\n    type_grid = SQLFORM.smartgrid(\n        db.device_type,\n        paginate=25,\n        csv=True,\n        details=False,\n        orderby=~db.device_type.id,\n        linked_tables=False\n    )\n    response.moduleTitle = "Device Type"\n    return dict(form_device_type= type_grid)\n\ndef device():\n    grid = SQLFORM.smartgrid(\n        db.device,\n        paginate=25,\n        csv=True,\n        details=False,\n        orderby=[db.device.device_type_id, db.device.name],\n        linked_tables=False\n    )\n\n    response.moduleTitle = "Device"\n    return dict(form_device=grid, dcode=json(d_code))\n\ndef apps_type():\n    type_grid = SQLFORM.smartgrid(\n        db.apps_type,\n        paginate=25,\n        csv=True,\n        details=False,\n        orderby=~db.apps_type.id,\n        linked_tables=False\n    )\n    response.moduleTitle = "Application Type"\n    return dict(form_app_type= type_grid)\n\ndef apps():\n    apps_grid = SQLFORM.smartgrid(\n        db.apps,\n        paginate=25,\n        csv=True,\n        details=False,\n        orderby=~db.apps.id,\n        linked_tables=False\n    )\n    response.moduleTitle = "Applications"\n    return dict(form_apps = apps_grid)\n\ndef app_assign():\n\n    def redirectToAppDetail(form):\n        app_assign_id = form.vars.id\n        redirect(URL(\'app_assign_detail\', vars=dict(app_assign_id=app_assign_id)))\n    form=SQLFORM.grid(db.app_assign,\n                        oncreate=redirectToAppDetail,\n                        onupdate=redirectToAppDetail,\n                        details=False,\n                        paginate=25,\n                        orderby=~db.app_assign.id|db.app_assign.app_type_id\n                        )\n    response.moduleTitle = \'Application Assign\'\n    return dict(form=form)\n\ndef app_assign_detail():\n    app_assign_id=request.vars.app_assign_id\n    if type(app_assign_id) == list:\n        app_assign_id=app_assign_id[-1]\n    db.app_assign_detail.app_assign_id.default = app_assign_id\n    form_app_assign_detail = SQLFORM(db.app_assign_detail)\n    form_app_assign_detail.add_button(\'Back\', URL(\'default\', \'app_assign\'))\n    if form_app_assign_detail.process().accepted:\n        redirect(URL(\'app_assign_detail\', vars=dict(app_assign_id=app_assign_id)))\n\n    response.moduleTitle = \'Applications Assign Detail\'\n    return dict(form_app_assign_detail=form_app_assign_detail, app_assign_id=app_assign_id)\n\ndef app_assign_detail_list():\n    #db.assign_device.device_id.requires = IS_IN_DB(db(db.device.is_active==True), db.device.id, \'%(name)s\')\n    app_assign_id = request.vars.app_assign_id\n    app_assign_detail_where = (db.app_assign_detail.app_assign_id == app_assign_id)\n    app_assign_detail_grid = SQLFORM.grid(app_assign_detail_where, fields=[db.app_assign_detail.id,\n                db.app_assign_detail.apps_id],\n        \t\tcreate=False,\n        \t\tsearchable=False,\n        \t\teditable=False,\n        \t\tdetails=False,\n        \t\tcsv=True,\n        \t\tpaginate=15,\n        \t\torderby=~db.app_assign_detail.app_assign_id\n    \t\t)\n    return dict(app_assign_detail_grid=app_assign_detail_grid)\n\ndef sim_plan():\n    grid = SQLFORM.smartgrid(db.sim_plan,\n        paginate=20,\n        csv=True,\n        details=False,\n        orderby=~db.sim_plan.id,\n        linked_tables=False)\n    response.moduleTitle = \'SIM Plan\'\n    return dict(form=grid)\n\ndef sim_brand():\n    grid= SQLFORM.smartgrid(db.sim_brand,\n        paginate=20,\n        csv=True,\n        details=False,\n        orderby=~db.sim_brand.id,\n        linked_tables=False)\n\n    response.moduleTitle= \'SIM Brand\'\n    return dict(form=grid)\n\ndef sim():\n    grid = SQLFORM.smartgrid(db.sim,\n                                paginate=20,\n                                csv=True,\n                                details=False,\n                                orderby=~db.sim.id|db.sim.brand_type_id,\n                                linked_tables=False\n                                )\n    response.moduleTitle = \'SIM Card\'\n    return dict(form=grid)\n\n\ndef department():\n    grid = SQLFORM.smartgrid(\n        db.department,\n        paginate=20,\n        csv=True,\n        details=False,\n        orderby=~db.department.id,\n        linked_tables=False\n    )\n    response.moduleTitle = \'Department\'\n    return dict(form=grid)\n\ndef location_plant():\n    grid = SQLFORM.smartgrid(db.location_plant,\n        paginate=20,\n        csv=True,\n        details=False,\n        orderby=~db.location_plant.id,\n        linked_tables=False)\n\n    response.moduleTitle=\'Plant\'\n    return dict(form=grid)\n\ndef printer_location():\n    grid = SQLFORM.smartgrid(db.printer_location,\n        paginate=20,\n        csv=True,\n        details=False,\n        orderby=~db.printer_location.id,\n        linked_tables=False)\n\n    response.moduleTitle=\'Printer Location\'\n    return dict(form=grid)\n\n\ndef employee():\n    grid = SQLFORM.smartgrid(\n        db.employee,\n        paginate=20,\n        csv=True,\n        details=False,\n        orderby=[db.employee.department_id, db.employee.name],\n        linked_tables=False\n    )\n\n    response.moduleTitle = \'Employee\'\n    return dict(form=grid)\n\ndef account_type():\n    grid = SQLFORM.smartgrid(\n        db.account_type,\n        paginate=20,\n        csv=True,\n        details=False,\n        orderby=~db.account_type.id,\n        linked_tables=False\n    )\n\n    response.moduleTitle = \'User Type\'\n    return dict(form=grid)\n\ndef email_type():\n    grid = SQLFORM.smartgrid(\n        db.email_type,\n        paginate=20,\n        csv=True,\n        details=False,\n        orderby=~db.email_type.id,\n        linked_tables=False\n    )\n\n    response.moduleTitle = \'EMail Type\'\n    return dict(form=grid)\n\ndef license_type():\n    grid = SQLFORM.smartgrid(\n        db.license_type,\n        paginate=20,\n        csv=True,\n        details=False,\n        orderby=~db.license_type.id,\n        linked_tables=False\n    )\n\n    response.moduleTitle = \'License Type\'\n    return dict(form=grid)\n\n\ndef email_account():\n    grid = SQLFORM.smartgrid(\n        db.email_account,\n        paginate=20,\n        csv=True,\n        details=False,\n        orderby=[db.email_account.email_type_id, db.email_account.username],\n        linked_tables=False)\n    response.moduleTitle = \'Email Account\'\n    return dict(form=grid)\n\ndef device_accessories():\n    grid = SQLFORM.smartgrid(\n        db.device_accessories,\n        paginate=20,\n        csv=True,\n        details=False,\n        orderby=~db.device_accessories.id,\n        linked_tables=False)\n    response.moduleTitle = \'Accessories\'\n    return dict(form=grid)\n\n\ndef register():\n    form=SQLFORM.factory(db.client,db.address)\n    if form.process().accepted:\n        id = db.client.insert(**db.client._filter_fields(form.vars))\n        form.vars.client=id\n        id = db.address.insert(**db.address._filter_fields(form.vars))\n        response.flash=\'Thanks for filling the form\'\n    response.moduleTitle = \'Register\'\n    return dict(form=form)\n\ndef rent():\n    grid = SQLFORM.smartgrid(\n        db.rent,\n        paginate=10,\n        csv=True,\n        details=False,\n        orderby=~db.rent.rent_date|db.rent.employee_id,\n        linked_tables=False\n    )\n\n    response.moduleTitle = \'Rent\'\n    return dict(form=grid)\n\ndef assign():\n\n\tdef redirectToDetail(form):\n\t\tassign_id = form.vars.id\n\t\tredirect(URL(\'assigndetail\', vars=dict(assign_id=assign_id)))\n\tform=SQLFORM.grid(db.assign,\n\t\toncreate=redirectToDetail,\n\t\tonupdate=redirectToDetail,\n\t\tdetails=False,\n\t\tpaginate=15,\n\t\torderby=~db.assign.id|db.assign.employee_id\n        )\n\tresponse.moduleTitle = \'Assign\'\n\treturn dict(form=form)\n\ndef assigndetail():\n    db.assign_device.device_id.requires=IS_IN_DB(db(db.device.is_active==\'T\'), db.device.id, \'%(name)s\')\n    assign_id=request.vars.assign_id\n    if type(assign_id) == list:\n        assign_id=assign_id[-1]\n    db.assign_device.assign_id.default = assign_id\n    db.assign_app.assign_id.default = assign_id\n    db.assign_accessories.assign_id.default = assign_id\n    db.assign_sim.assign_id.default = assign_id\n    db.assign_email.assign_id.default = assign_id\n    form_device = SQLFORM(db.assign_device)\n    form_app = SQLFORM(db.assign_app)\n    form_accessories = SQLFORM(db.assign_accessories)\n    form_sim = SQLFORM(db.assign_sim)\n    form_email = SQLFORM(db.assign_email)\n    form_device.add_button(\'Back\', URL(\'default\', \'assign\'))\n    form_device.add_button(\'Back\', URL(\'default\', \'assign\'))\n    form_app.add_button(\'Back\', URL(\'default\', \'assign\'))\n    form_sim.add_button(\'Back\', URL(\'default\', \'assign\'))\n    form_email.add_button(\'Back\', URL(\'default\', \'assign\'))\n    if form_device.process().accepted:\n        redirect(URL(\'assigndetail\', vars=dict(assign_id=assign_id)))\n    if form_app.process().accepted:\n        redirect(URL(\'assigndetail\', vars=dict(assign_id=assign_id)))\n    if form_accessories.process().accepted:\n        redirect(URL(\'assigndetail\', vars=dict(assign_id=assign_id)))\n    if form_sim.process().accepted:\n        redirect(URL(\'assigndetail\', vars=dict(assign_id=assign_id)))\n    if form_email.process().accepted:\n        redirect(URL(\'assigndetail\', vars=dict(assign_id=assign_id)))\n\n    response.moduleTitle = \'Assign Detail\'\n    return dict(form_device=form_device, form_app=form_app, form_email=form_email, form_accessories=form_accessories, form_sim=form_sim, assign_id=assign_id)\n\ndef assigndetaillist():\n    #db.assign_device.device_id.requires = IS_IN_DB(db(db.device.is_active==True), db.device.id, \'%(name)s\')\n\tassign_id = request.vars.assign_id\n\tdevice_where = (db.assign_device.assign_id == assign_id)\n\n\tdevice_grid = SQLFORM.grid(device_where, fields=[db.assign_device.id,\n            db.assign_device.device_id, db.assign_device.serial,\n            db.assign_device.is_used, db.assign_device.is_damaged,\n            db.assign_device.is_lost],\n\t\tcreate=False,\n\t\tsearchable=False,\n\t\teditable=False,\n\t\tdetails=False,\n\t\tcsv=True,\n\t\tpaginate=5,\n\t\torderby=~db.assign_device.device_id\n\t\t)\n\treturn dict(device_grid=device_grid)\n\ndef assignapplist():\n\tassign_id = request.vars.assign_id\n\tapp_where = (db.assign_app.assign_id == assign_id)\n\tapp_grid = SQLFORM.grid(app_where, fields=[db.assign_app.id, db.assign_app.app_id],\n\t\tcreate=False,\n\t\tsearchable=False,\n\t\teditable=False,\n\t\tdetails=False,\n\t\tcsv=True,\n\t\tpaginate=5,\n\t\torderby=~db.assign_app.app_id\n\t\t)\n\treturn dict(app_grid=app_grid)\n\ndef assignaccessorieslist():\n\tassign_id = request.vars.assign_id\n\taccessories_where = (db.assign_accessories.assign_id == assign_id)\n\taccessories_grid = SQLFORM.grid(accessories_where, fields=[db.assign_accessories.id, db.assign_accessories.accessories_id,\n        db.assign_accessories.serial, db.assign_accessories.is_used,\n        db.assign_accessories.is_damaged, db.assign_accessories.is_lost],\n\t\tcreate=False,\n\t\tsearchable=False,\n\t\teditable=True,\n\t\tdetails=False,\n\t\tcsv=True,\n\t\tpaginate=5,\n\t\torderby=~db.assign_accessories.accessories_id\n\t\t)\n\treturn dict(accessories_grid=accessories_grid)\n\ndef assignsimlist():\n\tassign_id = request.vars.assign_id\n\tsim_where = (db.assign_sim.assign_id == assign_id)\n\tsim_grid = SQLFORM.grid(sim_where, fields=[db.assign_sim.id, db.assign_sim.phone_number,\n        db.assign_sim.sim_brand_id, db.assign_sim.sim_plan_id, db.assign_sim.is_used,\n        db.assign_sim.is_locked, db.assign_sim.is_lost],\n\t\tcreate=False,\n\t\tsearchable=False,\n\t\teditable=True,\n\t\tdetails=False,\n\t\tcsv=True,\n\t\tpaginate=5,\n\t\torderby=~db.assign_sim.id\n\t\t)\n\treturn dict(sim_grid=sim_grid)\n\ndef assignemaillist():\n\tassign_id = request.vars.assign_id\n\temail_where = (db.assign_email.assign_id == assign_id)\n\temail_grid = SQLFORM.grid(email_where, fields=[db.assign_email.id, db.assign_email.username,\n        db.assign_email.default_password, db.assign_email.recovery_email,\n        db.assign_email.recovery_phone, db.assign_email.email_type_id,\n        db.assign_email.account_type_id, db.assign_email.is_active],\n\t\tcreate=False,\n\t\tsearchable=False,\n\t\teditable=True,\n\t\tdetails=False,\n\t\tcsv=True,\n\t\tpaginate=5,\n\t\torderby=~db.assign_email.id\n\t\t)\n\treturn dict(email_grid=email_grid)\n\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/bulk_register\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    also notice there is http://..../[app]/appadmin/manage/auth to allow administrator to manage users\n    """\n    return dict(form=auth())\n\n\n\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\nresponse._vars=response._caller(assigndetail)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/peace/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/peace/web2py/applications/monitor/controllers/default.py", line 507, in <module>\n  File "/home/peace/web2py/gluon/globals.py", line 417, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/peace/web2py/applications/monitor/controllers/default.py", line 371, in assigndetail\n    if form_device.process().accepted:\n  File "/home/peace/web2py/gluon/html.py", line 2301, in process\n    self.validate(**kwargs)\n  File "/home/peace/web2py/gluon/html.py", line 2239, in validate\n    if self.accepts(**kwargs):\n  File "/home/peace/web2py/gluon/sqlhtml.py", line 1529, in accepts\n    **kwargs\n  File "/home/peace/web2py/gluon/html.py", line 2125, in accepts\n    status = self._traverse(status, hideerror)\n  File "/home/peace/web2py/gluon/html.py", line 891, in _traverse\n    newstatus = c._traverse(status, hideerror) and newstatus\n  File "/home/peace/web2py/gluon/html.py", line 891, in _traverse\n    newstatus = c._traverse(status, hideerror) and newstatus\n  File "/home/peace/web2py/gluon/html.py", line 891, in _traverse\n    newstatus = c._traverse(status, hideerror) and newstatus\n  File "/home/peace/web2py/gluon/html.py", line 891, in _traverse\n    newstatus = c._traverse(status, hideerror) and newstatus\n  File "/home/peace/web2py/gluon/html.py", line 898, in _traverse\n    newstatus = self._validate()\n  File "/home/peace/web2py/gluon/html.py", line 1870, in _validate\n    raise Exception(msg)\nException: Validation error, field:serial <gluon.validators.IS_NOT_IN_DB object at 0x7fab669a8fd0>\n'
p11
s.