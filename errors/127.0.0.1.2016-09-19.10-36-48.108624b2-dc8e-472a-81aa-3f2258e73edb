(dp1
S'output'
p2
S'<class \'gluon.contrib.pymysql.err.ProgrammingError\'> (1146, u"Table \'devicemonitor.config\' doesn\'t exist")'
p3
sS'layer'
p4
S'/home/nyeinchan/web2py/applications/monitor/models/dbsetup.py'
p5
sS'code'
p6
S"from datetime import datetime\n\n## brand\ndb.define_table('brand',\n\tField('name', 'string', requires=[IS_NOT_EMPTY()]),\n\tField('is_active', 'boolean', default=True),\n\tField('created_on', 'datetime', default=request.now,\n\t\t\treadable=True, writable=False),\n\tField('created_by', 'reference auth_user', default=auth.user_id,\n\t\t\treadable=True, writable=False),\n\tField('modified_on', 'datetime', update=request.now,\n\t\t\treadable=True, writable=False),\n\tField('modified_by', 'reference auth_user', update=auth.user_id,\n\t\t\treadable=True, writable=False),\n\tformat='%(name)s')\n## Model\ndb.define_table('model',\n\tField('name', 'string', requires=[IS_NOT_EMPTY()]),\n\tField('brand', 'reference brand', requires=[ IS_IN_DB(db, db.brand.id, '%(name)s'), IS_NOT_EMPTY() ]),\n\tField('is_active', 'boolean', default=True),\n\tField('created_on', 'datetime', default=request.now,\n\t\t\treadable=True, writable=False),\n\tField('created_by', 'reference auth_user', default=auth.user_id,\n\t\t\treadable=True, writable=False),\n\tField('modified_on', 'datetime', update=request.now,\n\t\t\treadable=True, writable=False),\n\tField('modified_by', 'reference auth_user', update=auth.user_id,\n\t\t\treadable=True, writable=False))\n\n\n## Config group\ndb.define_table('config_group',\n\tField('name', 'string', requires=[IS_NOT_EMPTY()]),\n\tField('is_active', 'boolean', default=True),\n\tformat='%(name)s'\n)\n\n## Config\ndb.define_table('config',\n\tField('code', 'string', requires=[IS_NOT_EMPTY()]),\n\tField('name', 'string', requires=[IS_NOT_EMPTY()]),\n\tField('config_type', 'reference config_group', requires=[ IS_IN_DB(db, db.config_group.id, '%(name)s'), IS_NOT_EMPTY() ]),\n\tField('is_active', 'boolean', default=True),\n\tField('created_on', 'datetime', default=request.now,\n\t\t\treadable=True, writable=False),\n\tField('created_by', 'reference auth_user', default=auth.user_id,\n\t\t\treadable=True, writable=False),\n\tField('modified_on', 'datetime', update=request.now,\n\t\t\treadable=True, writable=False),\n\tField('modified_by', 'reference auth_user', update=auth.user_id,\n\t\t\treadable=True, writable=False),\n\tformat='%(name)s')\n\n\n## Room\ndb.define_table('room',\n\tField('name', 'string', requires=[IS_NOT_EMPTY()]),\n\tField('config', 'reference config', requires=[ IS_IN_DB(db, db.config.id, '%(name)s'), IS_NOT_EMPTY() ]),\n\tField('is_active', 'boolean', default=True),\n\tField('created_on', 'datetime', default=request.now,\n\t\t\treadable=True, writable=False),\n\tField('created_by', 'reference auth_user', default=auth.user_id,\n\t\t\treadable=True, writable=False),\n\tField('modified_on', 'datetime', update=request.now,\n\t\t\treadable=True, writable=False),\n\tField('modified_by', 'reference auth_user', update=auth.user_id,\n\t\t\treadable=True, writable=False)\n)\n\n\n## apps\ndb.define_table('apps',\n\tField('name', 'string', requires=[IS_NOT_EMPTY()]),\n\tField('is_active', 'boolean', default=True),\n\tField('created_on', 'datetime', default=request.now,\n\t\t\treadable=True, writable=False),\n\tField('created_by', 'reference auth_user', default=auth.user_id,\n\t\t\treadable=True, writable=False),\n\tField('modified_on', 'datetime', update=request.now,\n\t\t\treadable=True, writable=False),\n\tField('modified_by', 'reference auth_user', update=auth.user_id,\n\t\t\treadable=True, writable=False))\n\n## employee\ndb.define_table('employee',\n\tField('name', 'string', requires=[IS_NOT_EMPTY()]),\n\tField('job_title', 'string'),\n\tField('department', 'string'),\n\tField('email', 'string', requires=[IS_NOT_EMPTY(), IS_EMAIL()]),\n\tField('is_active', 'boolean', default=True),\n\tField('created_on', 'datetime', default=request.now,\n\t\t\treadable=True, writable=False),\n\tField('created_by', 'reference auth_user', default=auth.user_id,\n\t\t\treadable=True, writable=False),\n\tField('modified_on', 'datetime', update=request.now,\n\t\t\treadable=True, writable=False),\n\tField('modified_by', 'reference auth_user', update=auth.user_id,\n\t\t\treadable=True, writable=False))\n\n## default user root\nif db(db.auth_user).count() <1:\n\tdb.auth_group.bulk_insert([\n\t\tdict(role='Admin', description='System user'),\n\t\tdict(role='Manager', description='Manager'),\n\t\tdict(role='User', description='User')\n\t])\n\n\tdb.auth_user.bulk_insert([\n\t\tdict(\n\t\t\tfirst_name='System',\n\t\t\tlast_name='Admin',\n\t\t\temail='root@coca-cola.com.mm',\n\t\t\tpassword=db.auth_user.password.validate('C0ke@12345')[0]\n\t\t),\n\t\tdict(\n\t\t\tfirst_name='Nyein',\n\t\t\tlast_name='Chan',\n\t\t\temail='nyeinchan@coca-cola.com.mm',\n\t\t\tpassword=db.auth_user.password.validate('Basn4@C01')[0]\n\t\t)\n\t])\n\n\tauth.add_membership(user_id=1, group_id=1)\n\tauth.add_membership(user_id=2, group_id=1)\n\nif db(db.config_group).count() < 1:\n\tdb.config_type.bulk_insert([\n\t\tdict(name='Device'),\n\t\tdict(name='Email'),\n\t\tdict(name='Operator'),\n\t\tdict(name='Plan')\n\t])\n"
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/nyeinchan/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/nyeinchan/web2py/applications/monitor/models/dbsetup.py", line 52, in <module>\n    format=\'%(name)s\')\n  File "/home/nyeinchan/web2py/gluon/packages/dal/pydal/base.py", line 834, in define_table\n    table = self.lazy_define_table(tablename,*fields,**args)\n  File "/home/nyeinchan/web2py/gluon/packages/dal/pydal/base.py", line 873, in lazy_define_table\n    polymodel=polymodel)\n  File "/home/nyeinchan/web2py/gluon/packages/dal/pydal/adapters/base.py", line 510, in create_table\n    fake_migrate=fake_migrate\n  File "/home/nyeinchan/web2py/gluon/packages/dal/pydal/adapters/base.py", line 623, in migrate_table\n    self.execute(sub_query)\n  File "/home/nyeinchan/web2py/gluon/packages/dal/pydal/adapters/base.py", line 1388, in execute\n    return self.log_execute(*a, **b)\n  File "/home/nyeinchan/web2py/gluon/packages/dal/pydal/adapters/base.py", line 1382, in log_execute\n    ret = self.get_cursor().execute(command, *a[1:], **b)\n  File "/home/nyeinchan/web2py/gluon/contrib/pymysql/cursors.py", line 117, in execute\n    self.errorhandler(self, exc, value)\n  File "/home/nyeinchan/web2py/gluon/contrib/pymysql/connections.py", line 202, in defaulterrorhandler\n    raise errorclass, errorvalue\nProgrammingError: (1146, u"Table \'devicemonitor.config\' doesn\'t exist")\n'
p11
s.