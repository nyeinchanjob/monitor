(dp1
S'output'
p2
S'<class \'gluon.contrib.pymysql.err.InternalError\'> (1553, u"Cannot drop index \'email_id__idx\': needed in a foreign key constraint")'
p3
sS'layer'
p4
S'/home/peace/web2py/applications/monitor/models/dbsetup.py'
p5
sS'code'
p6
S'from datetime import datetime\nfrom gluon.contrib.appconfig import AppConfig\nimport os\n\n# myconf = AppConfig(reload=True)\n\n\n# device_brand\ndb.define_table(\'device_brand\',\n\tField(\'name\', \'string\', requires=[IS_NOT_EMPTY()], label="Brand"),\n\tField(\'is_active\', \'boolean\', default=True, label="Active"),\n\tField(\'created_on\', \'datetime\', default=request.now,\n\t\t\treadable=True, writable=False),\n\tField(\'created_by\', \'reference auth_user\', default=auth.user_id,\n\t\t\treadable=True, writable=False),\n\tField(\'modified_on\', \'datetime\', update=request.now,\n\t\t\treadable=True, writable=False),\n\tField(\'modified_by\', \'reference auth_user\', update=auth.user_id,\n\t\t\treadable=True, writable=False),\n\tformat=\'%(name)s\'\n)\n# device_model\ndb.define_table(\'device_model\',\n\tField(\'name\', \'string\',requires=[IS_NOT_EMPTY()], label="Model"),\n\tField(\'brand_id\', \'reference device_brand\',\n\t\trequires=[IS_NOT_EMPTY()], label="Brand"),\n\tField(\'is_active\', \'boolean\', default=True, label="Active"),\n\tField(\'created_on\', \'datetime\', default=request.now,\n\t\t\treadable=True, writable=False),\n\tField(\'created_by\', \'reference auth_user\', default=auth.user_id,\n\t\t\treadable=True, writable=False),\n\tField(\'modified_on\', \'datetime\', update=request.now,\n\t\t\treadable=True, writable=False),\n\tField(\'modified_by\', \'reference auth_user\', update=auth.user_id,\n\t\t\treadable=True, writable=False),\n\tformat = \'%(name)s\')\n\ndb.device_model.brand_id.requires=IS_IN_DB(db(db.device_brand.is_active == True), db.device_brand.id, \'%(name)s\')\n\n\n# device_type\ndb.define_table(\'device_type\',\n\tField(\'name\', \'string\', requires=[IS_NOT_EMPTY()], label="Device Type"),\n\tField(\'device_code\', \'string\', requires=[IS_NOT_EMPTY()], label="Prefix Code"),\n\tField(\'is_active\', \'boolean\', default=True, label="Active"),\n\tField(\'created_on\', \'datetime\', default=request.now,\n\t\t\treadable=True, writable=False),\n\tField(\'created_by\', \'reference auth_user\', default=auth.user_id,\n\t\t\treadable=True, writable=False),\n\tField(\'modified_on\', \'datetime\', update=request.now,\n\t\t\treadable=True, writable=False),\n\tField(\'modified_by\', \'reference auth_user\', update=auth.user_id,\n\t\t\treadable=True, writable=False),\n\tformat=\'%(name)s\'\n)\n\n# device_type\ndb.define_table(\'os_type\',\n\tField(\'name\', \'string\', requires=[IS_NOT_EMPTY()], label="OS Name"),\n\tField(\'is_active\', \'boolean\', default=True, label="Active"),\n\tField(\'created_on\', \'datetime\', default=request.now,\n\t\t\treadable=True, writable=False),\n\tField(\'created_by\', \'reference auth_user\', default=auth.user_id,\n\t\t\treadable=True, writable=False),\n\tField(\'modified_on\', \'datetime\', update=request.now,\n\t\t\treadable=True, writable=False),\n\tField(\'modified_by\', \'reference auth_user\', update=auth.user_id,\n\t\t\treadable=True, writable=False),\n\tformat=\'%(name)s\'\n)\n\n# apps_type\ndb.define_table(\'apps_type\',\n\tField(\'name\', \'string\', requires=[IS_NOT_EMPTY()], label="App Type"),\n\tField(\'is_active\', \'boolean\', default=True, label="Active"),\n\tField(\'created_on\', \'datetime\', default=request.now,\n\t\t\treadable=True, writable=False),\n\tField(\'created_by\', \'reference auth_user\', default=auth.user_id,\n\t\t\treadable=True, writable=False),\n\tField(\'modified_on\', \'datetime\', update=request.now,\n\t\t\treadable=True, writable=False),\n\tField(\'modified_by\', \'reference auth_user\', update=auth.user_id,\n\t\t\treadable=True, writable=False),\n\tformat=\'%(name)s\'\n)\n\n\n# apps\ndb.define_table(\'apps\',\n\tField(\'name\', \'string\', requires=[IS_NOT_EMPTY()], label="App Name"),\n\tField(\'is_active\', \'boolean\', default=True, label="Active"),\n\tField(\'created_on\', \'datetime\', default=request.now,\n\t\t\treadable=True, writable=False),\n\tField(\'created_by\', \'reference auth_user\', default=auth.user_id,\n\t\t\treadable=True, writable=False),\n\tField(\'modified_on\', \'datetime\', update=request.now,\n\t\t\treadable=True, writable=False),\n\tField(\'modified_by\', \'reference auth_user\', update=auth.user_id,\n\t\t\treadable=True, writable=False),\n\tformat=\'%(name)s\'\n)\n\n\n# app_assign\ndb.define_table(\'app_assign\',\n\tField(\'name\', \'string\', requires=[IS_NOT_EMPTY()], label="App Name"),\n\tField(\'app_type_id\', \'reference apps_type\', label="Type"),\n\tField(\'is_active\', \'boolean\', default=True, label="Active"),\n\tField(\'created_on\', \'datetime\', default=request.now,\n\t\t\treadable=True, writable=False),\n\tField(\'created_by\', \'reference auth_user\', default=auth.user_id,\n\t\t\treadable=True, writable=False),\n\tField(\'modified_on\', \'datetime\', update=request.now,\n\t\t\treadable=True, writable=False),\n\tField(\'modified_by\', \'reference auth_user\', update=auth.user_id,\n\t\t\treadable=True, writable=False),\n\n\tformat=\'%(name)s\'\n)\n\ndb.app_assign.app_type_id.requires=IS_IN_DB(db(db.apps_type.is_active == True), db.apps_type.id, \'%(name)s\')\n\n#app_assign_detail\ndb.define_table(\'app_assign_detail\',\n\tField(\'app_assign_id\', \'reference app_assign\', requires=[IS_NOT_EMPTY()], label="Assign ID"),\n\tField(\'apps_id\', \'reference apps\', requires=[IS_NOT_EMPTY()], label="Application Name")\n)\n\ndb.app_assign_detail.apps_id.requires=IS_IN_DB(db(db.apps.is_active == True), db.apps.id, \'%(name)s\')\n\n# email_type\ndb.define_table(\'email_type\',\n\tField(\'email_name\', \'string\', requires=[IS_NOT_EMPTY()], label="Email Type"),\n\tField(\'is_active\', \'boolean\', default=True, label="Active"),\n\tField(\'created_on\', \'datetime\', default=request.now,\n\t\t\treadable=True, writable=False),\n\tField(\'created_by\', \'reference auth_user\', default=auth.user_id,\n\t\t\treadable=True, writable=False),\n\tField(\'modified_on\', \'datetime\', update=request.now,\n\t\t\treadable=True, writable=False),\n\tField(\'modified_by\', \'reference auth_user\', update=auth.user_id,\n\t\t\treadable=True, writable=False),\n\tformat=\'%(email_name)s\')\n\n# license_type\ndb.define_table(\'license_type\',\n\tField(\'license_name\', \'string\', requires=[IS_NOT_EMPTY()], label="License Type"),\n\tField(\'is_active\', \'boolean\', default=True, label="Active"),\n\tField(\'created_on\', \'datetime\', default=request.now,\n\t\t\treadable=True, writable=False),\n\tField(\'created_by\', \'reference auth_user\', default=auth.user_id,\n\t\t\treadable=True, writable=False),\n\tField(\'modified_on\', \'datetime\', update=request.now,\n\t\t\treadable=True, writable=False),\n\tField(\'modified_by\', \'reference auth_user\', update=auth.user_id,\n\t\t\treadable=True, writable=False),\n\tformat=\'%(license_name)s\')\n\n# account_type\ndb.define_table(\'account_type\',\n\tField(\'account_name\', \'string\', requires=[IS_NOT_EMPTY()], label="Type Name"),\n\tField(\'is_active\', \'boolean\', default=True, label="Active"),\n\tField(\'created_on\', \'datetime\', default=request.now,\n\t\t\treadable=True, writable=False),\n\tField(\'created_by\', \'reference auth_user\', default=auth.user_id,\n\t\t\treadable=True, writable=False),\n\tField(\'modified_on\', \'datetime\', update=request.now,\n\t\t\treadable=True, writable=False),\n\tField(\'modified_by\', \'reference auth_user\', update=auth.user_id,\n\t\t\treadable=True, writable=False),\n\tformat=\'%(account_name)s\')\n\n## email\ndb.define_table(\'email_account\',\n\tField(\'username\', \'string\', requires=[IS_NOT_EMPTY()], label="Email Address"),\n\tField(\'default_password\', \'string\', label="Default Password"),\n\tField(\'recovery_email\', \'string\', label="Recovery Email"),\n\tField(\'recovery_phone\', \'string\', label="Recovery Phone"),\n\tField(\'email_type_id\', \'reference email_type\', requires=[IS_NOT_EMPTY()], label="Email Type"),\n\tField(\'account_type_id\', \'reference account_type\', requires=[IS_NOT_EMPTY()], label="User Type"),\n\tField(\'license_type_id\', \'reference license_type\', requires=[IS_NOT_EMPTY()], label="License Type"),\n\tField(\'is_used\', \'boolean\', default=False, label="Used"),\n\tField(\'is_active\', \'boolean\', default=True, label="Active"),\n\tField(\'created_on\', \'datetime\', default=request.now,\n\t\t\treadable=True, writable=False),\n\tField(\'created_by\', \'reference auth_user\', default=auth.user_id,\n\t\t\treadable=True, writable=False),\n\tField(\'modified_on\', \'datetime\', update=request.now,\n\t\t\treadable=True, writable=False),\n\tField(\'modified_by\', \'reference auth_user\', update=auth.user_id,\n\t\t\treadable=True, writable=False),\n\tformat=\'%(username)s\'\n)\n\ndb.email_account.email_type_id.requires=IS_IN_DB(db(db.email_type.is_active == True), db.email_type.id, \'%(email_name)s\')\ndb.email_account.account_type_id.requires=IS_IN_DB(db(db.account_type.is_active == True), db.account_type.id, \'%(account_name)s\')\ndb.email_account.license_type_id.requires=IS_IN_DB(db(db.license_type.is_active == True), db.license_type.id, \'%(license_name)s\')\n\n# department\ndb.define_table(\'department\',\n\tField(\'name\', \'string\', requires=[IS_NOT_EMPTY()], label="Department Name"),\n\tField(\'is_active\', \'boolean\', default=True, label="Active"),\n\tField(\'created_on\', \'datetime\', default=request.now,\n\t\t\treadable=True, writable=False),\n\tField(\'created_by\', \'reference auth_user\', default=auth.user_id,\n\t\t\treadable=True, writable=False),\n\tField(\'modified_on\', \'datetime\', update=request.now,\n\t\t\treadable=True, writable=False),\n\tField(\'modified_by\', \'reference auth_user\', update=auth.user_id,\n\t\t\treadable=True, writable=False),\n\tformat=\'%(name)s\'\n)\n\n## employee\ndb.define_table(\'employee\',\n\tField(\'code\', \'string\', requires=[IS_NOT_EMPTY()], label="Code"),\n\tField(\'name\', \'string\', requires=[IS_NOT_EMPTY()], label="Name"),\n\tField(\'job_title\', \'string\', label="Job Title"),\n\tField(\'department_id\', \'reference department\', requires=[IS_NOT_EMPTY()], label="Department"),\n\tField(\'phone\',  requires=[IS_NOT_EMPTY()], label="Phone"),\n\tField(\'is_active\', \'boolean\', default=True, label="Active"),\n\tField(\'created_on\', \'datetime\', default=request.now,\n\t\t\treadable=True, writable=False),\n\tField(\'created_by\', \'reference auth_user\', default=auth.user_id,\n\t\t\treadable=True, writable=False),\n\tField(\'modified_on\', \'datetime\', update=request.now,\n\t\t\treadable=True, writable=False),\n\tField(\'modified_by\', \'reference auth_user\', update=auth.user_id,\n\t\t\treadable=True, writable=False),\n\tformat=\'%(name)s\')\n\ndb.employee.department_id.requires=IS_IN_DB(db(db.department.is_active == True),db.department.id, \'%(name)s\')\n\n\n# location\ndb.define_table(\'location_plant\',\n\tField(\'prefix_plant\', \'string\', requires=[IS_NOT_EMPTY()], label="Prefix Code"),\n\tField(\'name\', \'string\', requires=[IS_NOT_EMPTY()], label="Location/Plant"),\n\tField(\'is_active\', \'boolean\', default=True, label="Active"),\n\tField(\'created_on\', \'datetime\', default=request.now,\n\t\t\treadable=True, writable=False),\n\tField(\'created_by\', \'reference auth_user\', default=auth.user_id,\n\t\t\treadable=True, writable=False),\n\tField(\'modified_on\', \'datetime\', update=request.now,\n\t\t\treadable=True, writable=False),\n\tField(\'modified_by\', \'reference auth_user\', update=auth.user_id,\n\t\t\treadable=True, writable=False),\n\tformat=\'%(name)s\'\n)\n\n\n# sim_brand\ndb.define_table(\'sim_brand\',\n\tField(\'name\', \'string\', requires=[IS_NOT_EMPTY()], label="SIM Brand"),\n\tField(\'is_active\', \'boolean\', default=True, label="Active"),\n\tField(\'created_on\', \'datetime\', default=request.now,\n\t\t\treadable=True, writable=False),\n\tField(\'created_by\', \'reference auth_user\', default=auth.user_id,\n\t\t\treadable=True, writable=False),\n\tField(\'modified_on\', \'datetime\', update=request.now,\n\t\t\treadable=True, writable=False),\n\tField(\'modified_by\', \'reference auth_user\', update=auth.user_id,\n\t\t\treadable=True, writable=False),\n\tformat=\'%(name)s\'\n)\n\n\n# sim_plan\ndb.define_table(\'sim_plan\',\n\tField(\'name\', \'string\', requires=[IS_NOT_EMPTY()], label="SIM Plan"),\n\tField(\'is_active\', \'boolean\', default=True, label="Active"),\n\tField(\'created_on\', \'datetime\', default=request.now,\n\t\t\treadable=True, writable=False),\n\tField(\'created_by\', \'reference auth_user\', default=auth.user_id,\n\t\t\treadable=True, writable=False),\n\tField(\'modified_on\', \'datetime\', update=request.now,\n\t\t\treadable=True, writable=False),\n\tField(\'modified_by\', \'reference auth_user\', update=auth.user_id,\n\t\t\treadable=True, writable=False),\n\tformat=\'%(name)s\'\n)\n\n##sim\ndb.define_table(\'sim\',\n\tField(\'sim_number\', \'string\', requires=[IS_NOT_EMPTY()],label="Phone Number"),\n\tField(\'brand_type_id\', \'reference sim_brand\', requires=[IS_NOT_EMPTY()], label="Operator"),\n\tField(\'plan_type_id\', \'reference sim_plan\', requires=[IS_NOT_EMPTY()], label="Plan"),\n\tField(\'is_used\', \'boolean\', default=False, label="Used"),\n\tField(\'is_active\', \'boolean\', default=True, label="Active"),\n\tField(\'created_on\', \'datetime\', default=request.now,\n\t\t\treadable=True, writable=False),\n\tField(\'created_by\', \'reference auth_user\', default=auth.user_id,\n\t\t\treadable=True, writable=False),\n\tField(\'modified_on\', \'datetime\', update=request.now,\n\t\t\treadable=True, writable=False),\n\tField(\'modified_by\', \'reference auth_user\', update=auth.user_id,\n\t\t\treadable=True, writable=False),\n\tformat=\'%(sim_number)s\'\n)\n\ndb.sim.brand_type_id.requires=IS_IN_DB(db(db.sim_brand.is_active == True),db.sim_brand.id, \'%(name)s\')\ndb.sim.plan_type_id.requires=IS_IN_DB(db(db.sim_plan.is_active == True),db.sim_plan.id, \'%(name)s\')\n\n\n\n## device\ndb.define_table(\'device\',\n\tField(\'name\', \'string\', requires=[IS_NOT_EMPTY()], label="Name"),\n\tField(\'device_brand_id\', \'reference device_brand\', requires=[IS_NOT_EMPTY()], label="Brand"),\n\tField(\'device_model_id\', \'reference device_model\', requires=[\n\tIS_IN_DB(db(db.device_model.is_active == True).select(db.device_model.id),\n\tdb.device_model.id, \'%(name)s\'),\n\tIS_NOT_EMPTY()], label="Model"),\n\tField(\'device_type_id\', \'reference device_type\', requires=[\n\tIS_IN_DB(db(db.device_type.is_active == True).select(db.device_type.id),\n\tdb.device_type.id, \'%(name)s\'),\n\tIS_NOT_EMPTY()], label="Type"),\n\tField(\'os_type_id\', \'reference os_type\', requires=[\n\tIS_IN_DB(db(db.os_type.is_active == True).select(db.os_type.id),\n\tdb.os_type.id, \'%(name)s\')], label="Operation System"),\n\tField(\'cpu\', \'string\',  label="CPU"),\n\tField(\'ram\', \'string\',  label="RAM"),\n\tField(\'hard_disk\', \'string\',  label="HDD"),\n\tField(\'drive\', \'string\', label="CD/DVD"),\n\tField(\'screen_size\', \'string\', label="Display"),\n\tField(\'is_active\', \'boolean\', default=True, label="Active"),\n\tField(\'created_on\', \'datetime\', default=request.now,\n\t\t\treadable=True, writable=False),\n\tField(\'created_by\', \'reference auth_user\', default=auth.user_id,\n\t\t\treadable=True, writable=False),\n\tField(\'modified_on\', \'datetime\', update=request.now,\n\t\t\treadable=True, writable=False),\n\tField(\'modified_by\', \'reference auth_user\', update=auth.user_id,\n\t\t\treadable=True, writable=False),\n\tformat=\'%(name)s\')\n\n\ndb.device.name.readonly = True\ndb.device.device_brand_id.requires = IS_IN_DB(db(db.device_brand.is_active == True),db.device_brand.id, \'%(name)s\')\ndb.device.device_model_id.requires = IS_IN_DB(db(db.device_model.is_active == True),db.device_model.id, \'%(name)s\')\ndb.device.device_type_id.requires = IS_IN_DB(db(db.device_type.is_active == True),db.device_type.id, \'%(name)s\')\ndb.device.os_type_id.requires = IS_IN_DB(db(db.os_type.is_active == True),db.os_type.id, \'%(name)s\')\nd_code = db(db.device_type.is_active == True).select(db.device_type.id, db.device_type.device_code)\n\n\n# sim_plan\ndb.define_table(\'device_accessories\',\n\tField(\'name\', \'string\', requires=[IS_NOT_EMPTY()], label="Accessories Name"),\n\tField(\'other_info\', \'string\', requires=[IS_NOT_EMPTY()], label="Others Information"),\n\tField(\'is_active\', \'boolean\', default=True, label="Active"),\n\tField(\'created_on\', \'datetime\', default=request.now,\n\t\t\treadable=True, writable=False),\n\tField(\'created_by\', \'reference auth_user\', default=auth.user_id,\n\t\t\treadable=True, writable=False),\n\tField(\'modified_on\', \'datetime\', update=request.now,\n\t\t\treadable=True, writable=False),\n\tField(\'modified_by\', \'reference auth_user\', update=auth.user_id,\n\t\t\treadable=True, writable=False),\n\tformat=\'%(name)s\'\n)\n\n##printer_location\ndb.define_table(\'printer_location\',\n\tField(\'printer_name\', \'string\', requires=[IS_NOT_EMPTY()],label="Printer Name"),\n\tField(\'location_plant_id\', \'reference location_plant\', requires=[IS_NOT_EMPTY()], label="Location"),\n\tField(\'department_id\', \'reference department\', requires=[IS_NOT_EMPTY()], label="Department"),\n\tField(\'printer_id\', \'reference device\', requires=[IS_NOT_EMPTY()], label="Printer"),\n\tField(\'Serial\', \'string\', requires=[IS_NOT_EMPTY()], label="Serial Number"),\n\tField(\'ip_address\', \'string\', default=\'0.0.0.0\', label="Network IP"),\n\tField(\'is_active\', \'boolean\', default=True, label="Active"),\n\tField(\'created_on\', \'datetime\', default=request.now,\n\t\t\treadable=True, writable=False),\n\tField(\'created_by\', \'reference auth_user\', default=auth.user_id,\n\t\t\treadable=True, writable=False),\n\tField(\'modified_on\', \'datetime\', update=request.now,\n\t\t\treadable=True, writable=False),\n\tField(\'modified_by\', \'reference auth_user\', update=auth.user_id,\n\t\t\treadable=True, writable=False),\n\tformat=\'%(printer_name)s\'\n)\n\ndb.printer_location.location_plant_id.requires=IS_IN_DB(db(db.location_plant.is_active == True),db.location_plant.id, \'%(name)s\')\ndb.printer_location.department_id.requires=IS_IN_DB(db(db.department.is_active == True),db.department.id, \'%(name)s\')\nprinter_id = 1\nfor i in db(db.device_type.name == \'Printer\').select(db.device_type.id):\n\tprinter_id = i.id\ndb.printer_location.printer_id.requires=IS_IN_DB(db(db.device.is_active == True and db.device.device_type_id == printer_id),db.device.id, \'%(name)s\')\n\n## Rent Device\ndb.define_table(\'rent\',\n\tField(\'employee_id\', \'reference employee\', requires=IS_NOT_EMPTY(), label="Employee"),\n\tField(\'rent_date\', \'datetime\', requires=IS_NOT_EMPTY(),  default=request.now, label="Rent Date"),\n\tField(\'device_id\', \'reference device\', requires=IS_NOT_EMPTY(), label="Device"),\n\tField(\'serial_number\', \'string\', requires=IS_NOT_EMPTY(), label="S/N or Assets Number"),\n\tField(\'rent_desc\', \'string\', label="Rent Description"),\n\tField(\'is_received\', \'boolean\', default=False, label="Received"),\n\tField(\'receive_date\', \'datetime\', label="Receive Date"),\n\tField(\'created_on\', \'datetime\', default=request.now,\n\t\t\treadable=True, writable=False),\n\tField(\'created_by\', \'reference auth_user\', default=auth.user_id,\n\t\t\treadable=True, writable=False),\n\tField(\'modified_on\', \'datetime\', update=request.now,\n\t\t\treadable=True, writable=False),\n\tField(\'modified_by\', \'reference auth_user\', update=auth.user_id,\n\t\t\treadable=True, writable=False),\n\n)\ndb.rent.rent_date.represent= lambda x, row: x.strftime("%B %d, %Y")\ndb.rent.receive_date.show_if = (db.rent.is_received == True)\ndb.rent.employee_id.requires = IS_IN_DB(db(db.employee.is_active == True),\n\t\t\t\t\t\t\t\t\tdb.employee.id, \'%(name)s\', sort=True)\ndb.rent.device_id.requires = IS_IN_DB(db(db.device.is_active == True),\n\t\t\t\t\t\t\t\t\t\t  db.device.id, \'%(name)s\', sort=True)\n\n\ndb.define_table(\'assign\',\n    Field(\'employee_id\', \'reference employee\', label="Employee", requires=IS_NOT_EMPTY()),\n    Field(\'assign_date\', \'datetime\', default=request.now, label="Assign Date", requires=IS_NOT_EMPTY()),\n\t# Field(\'email_id\', \'reference email_account\', label="E-Mail", requires=IS_NOT_EMPTY()),\n\tField(\'location_plant_id\', \'reference location_plant\', requires=[IS_NOT_EMPTY()], label="Location"),\n\tField(\'is_active\', \'boolean\', default=True, label="Active"),\n\tField(\'created_on\', \'datetime\', default=request.now,\n\t\t\treadable=True, writable=False),\n\tField(\'created_by\', \'reference auth_user\', default=auth.user_id,\n\t\t\treadable=True, writable=False),\n\tField(\'modified_on\', \'datetime\', update=request.now,\n\t\t\treadable=True, writable=False),\n\tField(\'modified_by\', \'reference auth_user\', update=auth.user_id,\n\t\t\treadable=True, writable=False),\n    format=lambda r: "%s_%s" % (r.assign_date.strftime("%Y%m%d"),\n                                   db.employee(r.employee_id).name))\n\n\ndb.assign.employee_id.requires = IS_IN_DB(db(db.employee.is_active == True),\n\t\t\t\t\t\t\t\t\tdb.employee.id, \'%(name)s\')\ndb.assign.assign_date.requires = IS_NOT_EMPTY()\n# email_id = 0\n# for email in db(db.email_type.is_active == True and db.email_type.email_name == \'Domain\').select(db.email_type.id):\n# \temail_id = email.id\n# db.assign.email_id.requires = IS_IN_DB(db(db.email_account.is_used == False and\n# \t\t\t\t\t\t\t\t\tdb.email_account.is_active == True and db.email_account.email_type_id == email_id),\n# \t\t\t\t\t\t\t\t\tdb.email_account.id, \'%(username)s\')\ndb.assign.location_plant_id.requires=IS_IN_DB(db(db.location_plant.is_active == True),db.location_plant.id, \'%(name)s\')\n\ndb.define_table(\'assign_device\',\n    Field(\'assign_id\', \'reference assign\', label=\'Assign ID\'),\n    Field(\'assign_id\', \'reference assign\', label=\'Assign ID\'),\n    Field(\'device_id\', \'reference device\', label=\'Device\', requires=IS_NOT_EMPTY()),\n    Field(\'serial\', \'string\', requires=IS_NOT_EMPTY(), label=\'S/N or Unique Number\'),\n    Field(\'asset_number\', \'string\', label=\'Assets Number\'),\n    Field(\'device_color\', \'string\', label=\'Color\'),\n\tField(\'is_used\', \'boolean\', default=True, label="Used"),\n\tField(\'is_damaged\', \'boolean\', default=False, label="Damaged"),\n\tField(\'is_lost\', \'boolean\', default=False, label="Lost")\n)\n\ndb.assign_device.device_id.requires=IS_IN_DB(db(db.device.is_active==True), db.device.id, \'%(name)s\')\n\nused_serial =db((db.assign_device.is_used == True) | (db.assign_device.is_lost==True) | (db.assign_device.is_damaged==True))\ndb.assign_device.serial.requires=IS_NOT_IN_DB(used_serial, \'assign_device.serial\', error_message=\'This Serail Number is currently used.\')\n\ndb.define_table(\'assign_app\',\n\tField(\'assign_id\', \'reference assign\', label=\'Assign ID\'),\n\tField(\'app_id\', \'reference app_assign\', label=\'Application Name\', requires=IS_NOT_EMPTY()),\n)\n\ndb.assign_app.app_id.requires = IS_IN_DB(db(db.app_assign.is_active == True), db.app_assign.id, \'%(name)s\')\n\ndb.define_table(\'assign_accessories\',\n\tField(\'assign_id\', \'reference assign\', label=\'Assign ID\'),\n\tField(\'accessories_id\', \'reference device_accessories\', label=\'Accessory\', requires=IS_NOT_EMPTY()),\n\tField(\'serial\', \'string\', requires=IS_NOT_EMPTY(), label=\'S/N or Unique Number\'),\n    Field(\'asset_number\', \'string\', label=\'Assets Number\'),\n\tField(\'is_used\', \'boolean\', default=True, label="Used"),\n\tField(\'is_damaged\', \'boolean\', default=False, label="Damaged"),\n\tField(\'is_lost\', \'boolean\', default=False, label="Lost")\n)\n\ndb.assign_accessories.accessories_id.requires=IS_IN_DB(db(db.device_accessories.is_active == True),db.device_accessories.id, \'%(name)s\')\n\ndb.define_table(\'assign_sim\',\n\tField(\'assign_id\', \'reference assign\', label=\'Assign ID\'),\n\tField(\'phone_number\', \'string\', label=\'Phone Number\'),\n\tField(\'sim_brand_id\', \'reference sim_brand\', label=\'Operator\'),\n\tField(\'sim_plan_id\', \'reference sim_plan\', label=\'Plan\'),\n\tField(\'is_used\', \'boolean\', default=True, label="Used"),\n\tField(\'is_locked\', \'boolean\', default=False, label="Locked"),\n\tField(\'is_lost\', \'boolean\', default=False, label="Lost")\n)\n\n\ndb.assign_sim.sim_brand_id.requires = IS_IN_DB(db(db.sim_brand.is_active == True), db.sim_brand.id, \'%(name)s\')\ndb.assign_sim.sim_plan_id.requires = IS_IN_DB(db(db.sim_plan.is_active == True), db.sim_plan.id, \'%(name)s\')\nused_sim =db((db.assign_sim.is_used == True) | (db.assign_sim.is_locked == True) | (db.assign_sim.is_lost == True))\ndb.assign_sim.phone_number.requires=IS_NOT_IN_DB(used_sim, \'assign_sim.phone_number\', error_message=\'This Sim Number is currently used.\')\n\n## email\ndb.define_table(\'assign_email\',\n\tField(\'assign_id\', \'reference assign\', label=\'Assign ID\'),\n\tField(\'username\', \'string\', requires=[IS_NOT_EMPTY()], label="Email Address"),\n\tField(\'default_password\', \'string\', label="Default Password"),\n\tField(\'recovery_email\', \'string\', label="Recovery Email"),\n\tField(\'recovery_phone\', \'string\', label="Recovery Phone"),\n\tField(\'email_type_id\', \'reference email_type\', requires=[IS_NOT_EMPTY()], label="Email Type"),\n\tField(\'account_type_id\', \'reference account_type\', requires=[IS_NOT_EMPTY()], label="User Type"),\n\tField(\'is_used\', \'boolean\', default=False, label="Used"),\n\tField(\'is_active\', \'boolean\', default=True, label="Active"),\n\tformat=\'%(username)s\'\n)\n\ndb.assign_email.email_type_id.requires=IS_IN_DB(db(db.email_type.is_active == True), db.email_type.id, \'%(email_name)s\')\ndb.assign_email.account_type_id.requires=IS_IN_DB(db(db.account_type.is_active == True), db.account_type.id, \'%(account_name)s\')\nused_email =db((db.assign_email.is_used == True))\ndb.assign_sim.phone_number.requires=IS_NOT_IN_DB(used_email, \'assign_email.username\', error_message=\'This Username is currently used.\')\n\n\n## default user root\nif db(db.auth_user).count() <1:\n\tdb.auth_group.bulk_insert([\n\t\tdict(role=\'Admin\', description=\'System user\'),\n\t\tdict(role=\'Manager\', description=\'Manager\'),\n\t\tdict(role=\'User\', description=\'User\')\n\t])\n\n\tdb.auth_user.bulk_insert([\n\t\tdict(\n\t\t\tfirst_name=\'System\',\n\t\t\tlast_name=\'Admin\',\n\t\t\temail=\'root@coca-cola.com.mm\',\n\t\t\tpassword=db.auth_user.password.validate(\'C0ke@12345\')[0]\n\t\t),\n\t\tdict(\n\t\t\tfirst_name=\'Nyein\',\n\t\t\tlast_name=\'Chan\',\n\t\t\temail=\'nyeinchan@coca-cola.com.mm\',\n\t\t\tpassword=db.auth_user.password.validate(\'Basn4@C01\')[0]\n\t\t)\n\t])\n\n\tauth.add_membership(user_id=1, group_id=1)\n\tauth.add_membership(user_id=2, group_id=1)\n\n# if db(db.config_group).count() < 1:\n# \tdb.config_group.bulk_insert([\n# \t\tdict(name=myconf.get(\'default_type.acs\')),\n# \t\tdict(name=myconf.get(\'default_type.app\')),\n# \t\tdict(name=myconf.get(\'default_type.dpt\')),\n# \t\tdict(name=myconf.get(\'default_type.dvc\')),\n# \t\tdict(name=myconf.get(\'default_type.eml\')),\n# \t\tdict(name=myconf.get(\'default_type.loc\')),\n# \t\tdict(name=myconf.get(\'default_type.lnc\')),\n# \t\tdict(name=myconf.get(\'default_type.opt\')),\n# \t\tdict(name=myconf.get(\'default_type.pln\')),\n# \t\tdict(name=myconf.get(\'default_type.usr\'))\n# \t])\n\n# Insert into outlet(name, is_active) values\n# (\'Computer Shop\', 1)\n# ,(\'Caf\xc3\xa9\', 1)\n# ,(\'Caf\xc3\xa9 Pub\', 1)\n# ,(\'Clinic with Pharmacy\', 1)\n# ,(\'Cold Drink\', 1)\n# ,(\'Computer Shop\', 1)\n# ,(\'Convenience Store _ Cigarette Specialized\', 1)\n# ,(\'Convenience Store _ Liquor Specialized\', 1)\n# ,(\'Convenience Store _ Miscellaneous/ Sundry\', 1)\n# ,(\'Convenience Store _ Modern Trade\', 1)\n# ,(\'Convenience Store _ Petro Station\', 1)\n# ,(\'Convenience Store _ Specialized\', 1)\n# ,(\'Convenience Store _ Traditional\', 1)\n# ,(\'Department Store\', 1)\n# ,(\'Diner Outlet\', 1)\n# ,(\'Family Stall\', 1)\n# ,(\'Food Stall/Traditional Food\', 1)\n# ,(\'Game Center\', 1)\n# ,(\'General Store\', 1)\n# ,(\'Grocery Store\', 1)\n# ,(\'Guest House/Inn/Motel\', 1)\n# ,(\'Home Appliance\', 1)\n# ,(\'Hotel (International Standard)\', 1)\n# ,(\'Hotel (Local Standard)\', 1)\n# ,(\'Internet Cafe\', 1)\n# ,(\'Kiosks/Hawker\', 1)\n# ,(\'KTV\', 1)\n# ,(\'Mini Mart\', 1)\n# ,(\'Mobile Shop\', 1)\n# ,(\'Night Club\', 1)\n# ,(\'Pharmacy Store\', 1)\n# ,(\'Restaurant with indoor/outdoor Sports\', 1)\n# ,(\'Restaurant with Live Entertainment\', 1)\n# ,(\'Semi Whole Sale\', 1)\n# ,(\'Super Market/Hyper Market\', 1)\n# ,(\'Tea Shop\', 1)\n# ,(\'Whole Sale\', 1)\n# ,(\'Others\', 1);\n#\n# Insert into question (name, is_active) values\n# (\'Cooler Coke\', 1)\n# ,(\'Cooler Pepsi\', 1)\n# ,(\'Cooler Blue Mountain\', 1)\n# ,(\'Cooler Asia\', 1)\n# ,(\'Cooler Own\', 1)\n# ,(\'Refrigerator Own\', 1)\n# ,(\'Freezer Own\', 1)\n# ,(\'Self Service/Outlet Service\', 1)\n# ,(\'Coke RGB\', 1)\n# ,(\'Pepsi RGB\', 1)\n# ,(\'CSD (Non-Alcohol)\', 1)\n# ,(\'Soda (Non-Alcohol)\', 1)\n# ,(\'FF Drink (Non-Alcohol)\', 1)\n# ,(\'FF Powder (Non-Alcohol)\', 1)\n# ,(\'ASD (Non-Alcohol)\', 1)\n# ,(\'Isotonic Drink (Non-Alcohol)\', 1)\n# ,(\'Energy Drink (Non-Alcohol)\', 1)\n# ,(\'Carbonated Energy Drink (Non-Alcohol)\', 1)\n# ,(\'Drinking Water (Non-Alcohol)\', 1)\n# ,(\'Instant Coffee (Non-Alcohol)\', 1)\n# ,(\'Tea Mix (Non-Alcohol)\', 1)\n# ,(\'Coffee Canned (Non-Alcohol)\', 1)\n# ,(\'Import Snack (Foods)\', 1)\n# ,(\'Confectionary (Foods)\', 1)\n# ,(\'Ice Cream/Lollies (Foods)\', 1);\n#\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/peace/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/peace/web2py/applications/monitor/models/dbsetup.py", line 430, in <module>\n    format=lambda r: "%s_%s" % (r.assign_date.strftime("%Y%m%d"),\n  File "/home/peace/web2py/gluon/packages/dal/pydal/base.py", line 834, in define_table\n    table = self.lazy_define_table(tablename,*fields,**args)\n  File "/home/peace/web2py/gluon/packages/dal/pydal/base.py", line 873, in lazy_define_table\n    polymodel=polymodel)\n  File "/home/peace/web2py/gluon/packages/dal/pydal/adapters/base.py", line 510, in create_table\n    fake_migrate=fake_migrate\n  File "/home/peace/web2py/gluon/packages/dal/pydal/adapters/base.py", line 623, in migrate_table\n    self.execute(sub_query)\n  File "/home/peace/web2py/gluon/packages/dal/pydal/adapters/base.py", line 1388, in execute\n    return self.log_execute(*a, **b)\n  File "/home/peace/web2py/gluon/packages/dal/pydal/adapters/base.py", line 1382, in log_execute\n    ret = self.get_cursor().execute(command, *a[1:], **b)\n  File "/home/peace/web2py/gluon/contrib/pymysql/cursors.py", line 117, in execute\n    self.errorhandler(self, exc, value)\n  File "/home/peace/web2py/gluon/contrib/pymysql/connections.py", line 202, in defaulterrorhandler\n    raise errorclass, errorvalue\nInternalError: (1553, u"Cannot drop index \'email_id__idx\': needed in a foreign key constraint")\n'
p11
s.